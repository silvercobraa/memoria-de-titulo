y_pred = list('FBBFUUFBDFRDLRUUDUDRRLFDUDFBFRLDRRFBLRLULFDBRLDUBBLLUBBFFRURRULFUURRUFUUBFUUFBLURDBDLDLDRBRFUBLFRUBLLUBBLLFFFDBLUBLLBDDLBRFFUUDFRDFUBULRLDRDRRRLRBBDLFUFUULDUBRFBFBFUUULFBRFBBDRUFDULUUUFRLUDFRRBULUFRLFUBLFBDDRRDLBRBLLRRFDUFLUURRDFRDDBBBRFDFLFUFLFLUDLURDBFFBLLRLFRBDBBULDBFBBRURBLDBBRBRRFURUDLLFDUUURFLLDBRUBDFLDLFFUFDLLDBFURDDUFUUBFDDFFFDRFFRLUFRLFBUBRLLBLDBDRBLFRDLUBFBLRFRBLDDRURDDULBBLUBBFRLFURLRFFFRFUDDLRFDRUDBLFDBLUFLLRDBDBUUBRUFLRULUBBRBFFRFBDRLRURFURUDBBLRDLLDFRFBLLDDUDULFDBUDBFLFURUDUUDBBBFRFFDDBBLDFLFDRRRULDLDUFUBRULFBBDLUFRBRLLRLLFUURDLLDFUDRUUFUFFBUFFFDRUBBRDUBDBFRRBLBRBRLDDLBLLRDRFUBULLUBUDLDRBFDFDRLRFFDUDRLRLDRUBLFRBLLFRBBFUUDBFDUBRBFRUDBDBLBUURFRFUDLDFFBLDUFRFUDLUURDBRRLDBFDLLFRBUBLLDFLRUDRUUBFURRBFFDFLRUFBUDLRUDBDLBFLFUURLLULBBRRDBDBFLRLFFUUULLBRDBRRDDRFBDBFRRDLULBUDFFDUBRLLLULFBRFDDBDFBDUBFBURBLUBDDBRDLFDUDRLFLUFBFRDFDUDUBRDLULUFLLRRFFBBRRLFDBUUULFRBLLBRFRDDFDDRFUUDBRBULDRBLRLRDRLFDFFULUUBBFBLBULDUBFBLBRFFRUDLRUDUUFDDRFRDLLDFDBBLLRFLRRUBUBDFBRULFDULLUULUDRRURRRULUDDDDFDFDLUFFDDBDFRFUBFLDFLRBFRBBLBRLBRDDUUBBLBFFFRLRLFRLUBFLDDFBFDBDDUBRDRUFLULDLLURUBRURF')

y_true = list('FBBFUUFBDFRDLRUUDUDRRLFDUDFBFRLDRRFBLRLULFDBRLDUBBLLUBBFFRURRULFDURRDFDUBFDDFBLURDBULDLDRBRFDBLFRUBLLUBBLLUFFDBLUBLLBDDLBRFFUUDFRDFUBULRLDRDRRRLRBBDLFUFUULDUBRFBFBFDUDLFBRFBBDRUFDULUUUFRLUDFRRBDLUFRLFUBLFBDDRRDLBRBLLRRFDUFLUURRDFRDDBBBRFDFLFUFLFLUDLURDBFUBLLRLURBDBBULDBFBBRURBLDBBRBRRFURUDLLFDUUURFLLDBRUBDFLDLFFUFDLLDBFURDDUFUUBFDDFUUDRFURLUFRLFBUBRLLBLDBDRBLFRDLUBFBLRFRBLDDRURDDULBBLUBBFRLFURLRFFFRFUDDLRFDRUDBLFDBLUFLLRDBDBUUBRUFLRULUBBRBFFRFBDRLRURFURUDBBLRDLLDFRFBLLDDUDULFDBUDBFLFURUDUUDBBBFRFFDDBBLDFLFDRRRULDLDUFUBRULFBBDLUFRBRLLRLLFUURDLLDFUDRUUFUFFBUFFFDRUBBRDUBDBFRRBLBRBRLDDLBLLRDRFUBULLUBUDLDRBFDFDRLRFFDUDRLRLDRUBLFRBLLFRBBFUUDBFDUBRBFRUDBDBLBUURFRFUDLDFFBLDUFRFUDLUURDBRRLDBFDLLFRBUBLLDFLRUDRUUBFURRBFFDFLRDFBDBLRUDBDUFLLFUURLLULBBRRDBDBFLRLFFUUULLBRDBRRDDRFBUBFRRULULBUDFFDUBRLLLULFBRFDDBDFBDUBFBURBLUBDDBRDLFDUDRLFLUFBFRDFDUDUBRDLULUFLLRRFFBBRRLFDBUUULFRBLLBRFRDDFDDRFUUDBRBULDRBLRLRDRLFDFFULUUBBFBLBULDUBFBLBRFFRUDLRUDUUFDDRFRDLLDFDBBLLRFLRRUBUBDFBRULFDULLUULUDRRURRRULUDBBBFDFDLUFFDDBDFRFUBFLDFLRBFRBBLBRLBRDDUUBBLBFFFRLRLFRLUBFLDDFBFDBDDUBRDRUFLULDLLURUBRURF')

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np

cls = list('URFDLB')
# for i in range(20):
#     s = y_pred[54*i:54*(i+1)]
#     for c in 'URFDLB':
#         if s.count(c) != 9:
#             print(i, c)
#         print(s.count(c))
#     # print(s)
# import sys
# sys.exit()
print(y_pred)
print(y_true)
mat = confusion_matrix(y_true, y_pred, labels=cls)
mat_norm = mat / mat.max()
print(mat)
print(mat_norm)


def plot_confusion_matrix(m, classes, title=None, fmt='.4f', cmap=plt.cm.Blues):
    fig, ax = plt.subplots()
    im = ax.imshow(m, interpolation='nearest', cmap=cmap)
    print(im, 'AAAAAA')
    ax.figure.colorbar(im, ax=ax)
    # We want to show all ticks...
    yticks = np.arange(1)-0.5
    yticks = np.append(yticks, np.arange(m.shape[0]))
    yticks = np.append(yticks, np.arange(1)+m.shape[0] - 0.5)
    ycls = [' '] + classes + [' ']
    ax.set(xticks=np.arange(m.shape[1]),
           yticks=yticks,
           xticklabels=classes, yticklabels=ycls,
           title=title,
           ylabel='Etiqueta real',
           xlabel='Etiqueta predicha')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    thresh = m.max() / 2.
    for i in range(m.shape[0]):
        for j in range(m.shape[1]):
            ax.text(j, i, format(m[i, j], fmt),
                    ha="center", va="center",
                    color="white" if m[i, j] > thresh else "black", fontsize='large')
    fig.tight_layout()
    return ax

ax = plot_confusion_matrix(mat, cls, 'Matriz de confusión', 'd')
plt.show()
ax = plot_confusion_matrix(mat_norm, cls, 'Matriz de confusión, normalizada', '.3f')
plt.show()
